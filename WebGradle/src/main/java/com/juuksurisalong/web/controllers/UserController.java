package com.juuksurisalong.web.controllers;

import java.sql.Date;
import java.time.LocalDate;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.ResponseBody;

import com.juuksurisalong.web.data.Role;
import com.juuksurisalong.web.data.User;
import com.juuksurisalong.web.repositories.RoleRepository;
import com.juuksurisalong.web.repositories.UserRepository;


@Controller    // This means that this class is a Controller
@RequestMapping(path="/service") // This means URL's start with /demo (after Application path)
public class UserController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;
	private RoleRepository roleRepository;

	@GetMapping(path="users/{id}")
	public @ResponseBody User getUserById(@PathVariable("id") long id) {
		// This returns a JSON or XML with the users
		return userRepository.findOne(id);
	}

	@GetMapping(path="users/all")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}
	
	@PostMapping(path="users/register", consumes="application/json")
	public @ResponseBody User saveUser(@RequestBody User user) {
		//Validate if email is unique
		if (userRepository.findByEmail(user.getEmail()).isEmpty()) {
			userRepository.save(user);
		} else {
			//400 Bad Request
		}
		
		return user;
	}
	
	@DeleteMapping(path="users/delete")
	public @ResponseBody User deleteUser(@RequestBody User user) {
		//Validate if email is unique
		if (!userRepository.findByEmail(user.getEmail()).isEmpty()) {
			userRepository.delete(user.getId());
		} else {
			//400 Bad Request
		}
		
		return user;
	}
	
	@PostMapping(path="roles/add", consumes="application/json")
	public @ResponseBody Role addRole(@RequestBody Role role) {
		roleRepository.save(role);
		return role;
	}
}